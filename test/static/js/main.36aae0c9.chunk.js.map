{"version":3,"sources":["components/layout/Header.js","components/TodoItem.js","components/Todos.js","components/AddTodo.js","components/pages/About.js","App.js","serviceWorker.js","index.js"],"names":["headerStyle","background","color","textAlign","linkStyle","textDecoration","Header","style","to","TodoItem","getStyle","padding","borderBottom","props","todo","completed","this","id","title","type","onChange","markComplete","bind","onClick","delTodo","btnStyle","Component","border","borderRadius","cursor","float","Todos","todos","map","key","AddTodo","state","onSubmit","e","preventDefault","addTodo","setState","target","name","value","display","flex","placeholder","className","About","Fragment","App","axios","delete","then","res","filter","post","data","get","exact","path","render","component","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0RAYI,IAAMA,EAAc,CAChBC,WAAY,OACZC,MAAO,OACPC,UAAW,UAGTC,EAAY,CACdF,MAAO,OACPG,eAAgB,QAGTC,EApBf,WACI,OACI,4BAAQC,MAAOP,GACX,wCACA,kBAAC,IAAD,CAAMO,MAAOH,EAAWI,GAAG,KAA3B,QAFJ,MAEiD,kBAAC,IAAD,CAAMD,MAAOH,EAAWI,GAAG,UAA3B,WCJ5CC,EAAb,2MACIC,SAAW,WACR,MAAM,CACFT,WAAY,UACZU,QAAS,OACTC,aAAc,kBACdP,eAAgB,EAAKQ,MAAMC,KAAKC,UAAY,eAAiB,SANxE,wEAUc,IAAD,EAEcC,KAAKH,MAAMC,KAAxBG,EAFD,EAECA,GAAIC,EAFL,EAEKA,MAEV,OACI,yBAAKX,MAAOS,KAAKN,YACb,2BACA,2BAAOS,KAAK,WAAWC,SAAUJ,KAAKH,MAAMQ,aAAaC,KAAKN,KAAMA,KAAKH,MAAMC,KAAKG,MADpF,IAC4F,IAC3FC,EACD,4BAAQK,QAASP,KAAKH,MAAMW,QAAQF,KAAKN,KAAMC,GAAKV,MAAOkB,GAA3D,WAnBhB,GAA8BC,aAiCxBD,EAAW,CACbxB,WAAY,UACZC,MAAO,OACPyB,OAAQ,OACRhB,QAAS,UACTiB,aAAc,MACdC,OAAQ,UACRC,MAAO,SAGIrB,IC5BAsB,E,iLAbD,IAAD,OACL,OAAOf,KAAKH,MAAMmB,MAAMC,KAAI,SAACnB,GAAD,OACxB,kBAAC,EAAD,CAAUoB,IAAKpB,EAAKG,GAAIH,KAAMA,EAAMO,aAAc,EAAKR,MAAMQ,aAAcG,QAAS,EAAKX,MAAMW,iB,GAHvFE,a,QCkCLS,EAnCf,2MACIC,MAAO,CACHlB,MAAO,IAFf,EAKImB,SAAU,SAACC,GACPA,EAAEC,iBACF,EAAK1B,MAAM2B,QAAQ,EAAKJ,MAAMlB,OAC9B,EAAKuB,SAAS,CAACvB,MAAO,MAR9B,EAWIE,SAAW,SAACkB,GAAD,OAAO,EAAKG,SAAL,eAAgBH,EAAEI,OAAOC,KAAOL,EAAEI,OAAOE,SAX/D,wEAcI,OACE,0BAAMP,SAAUrB,KAAKqB,SAAU9B,MAAO,CAACsC,QAAS,SAC5C,2BAAO1B,KAAK,OAAOwB,KAAK,QACxBpC,MAAO,CAACuC,KAAK,KAAMnC,QAAS,OAC5BoC,YAAY,cACZH,MAAO5B,KAAKoB,MAAMlB,MAClBE,SAAUJ,KAAKI,WACf,2BAAOD,KAAK,SAASyB,MAAM,SAC3BI,UAAU,MAAMzC,MAAO,CAACuC,KAAM,YAtBxC,GAA6BpB,aCQduB,MATf,WACE,OACC,kBAAC,IAAMC,SAAP,KACI,qCACA,2H,iBCsFQC,G,iNA9Ebf,MAAM,CACJJ,MAAO,I,EAyBTX,aAAe,SAACJ,GACd,EAAKwB,SAAS,CAACT,MAAM,EAAKI,MAAMJ,MAAMC,KAAI,SAAAnB,GAIxC,OAHGA,EAAKG,KAAOA,IACbH,EAAKC,WAAaD,EAAKC,WAElBD,Q,EAKXU,QAAQ,SAACP,GAELmC,IAAMC,OAAN,qDAA2DpC,IAC1DqC,MAAK,SAAAC,GAAG,OAAM,EAAKd,SAAS,CAACT,MAAM,YAAK,EAAKI,MAAMJ,MAAMwB,QACvD,SAAA1C,GAAI,OAAIA,EAAKG,KAAOA,Y,EAM3BuB,QAAU,SAACtB,GAETkC,IAAMK,KAAK,6CAA8C,CACzDvC,QACAH,WAAU,IAETuC,MAAK,SAAAC,GAAG,OAAI,EAAKd,SAAS,CAACT,MAAM,GAAD,mBAAM,EAAKI,MAAMJ,OAAjB,CAAwBuB,EAAIG,a,mFA/B3C,IAAD,OACjBN,IAAMO,IAAI,uDAAuDL,MAAK,SAAAC,GAAG,OAAI,EAAKd,SAAS,CAACT,MAAOuB,EAAIG,Y,+BAkCjG,IAAD,OACP,OACE,kBAAC,IAAD,KACA,yBAAKV,UAAU,OACb,yBAAKA,UAAY,aACjB,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAOY,OAAK,EAACC,KAAM,IAAIC,OAAQ,SAAAjD,GAAK,OAClC,kBAAC,IAAMqC,SAAP,KACG,kBAAC,EAAD,CAASV,QAAW,EAAKA,UAC1B,kBAAC,EAAD,CAAOR,MAAO,EAAKI,MAAMJ,MAAOX,aAAc,EAAKA,aACnDG,QAAS,EAAKA,cAIlB,kBAAC,IAAD,CAAOqC,KAAK,SAASE,UAAWd,W,GAvEpBvB,cCDEsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASP,OAAO,kBAAC,EAAD,MAASQ,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpB,MAAK,SAAAqB,GACjCA,EAAaC,kB","file":"static/js/main.36aae0c9.chunk.js","sourcesContent":["import React from 'react'; \nimport {Link } from 'react-router-dom';\n\nfunction Header(){\n    return (\n        <header style={headerStyle}>\n            <h1>TodoList</h1>\n            <Link style={linkStyle} to=\"/\">Home</Link> | <Link style={linkStyle} to=\"/about\">About</Link>\n        </header>\n    )\n    \n    }\n    const headerStyle = {\n        background: '#333', \n        color: '#fff', \n        textAlign: 'center',\n    }\n\n    const linkStyle = {\n        color: '#fff', \n        textDecoration: 'none'\n    }\n\nexport default Header; ","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'; \n\nexport class TodoItem extends Component {\n    getStyle = () => {\n       return{\n           background: '#f4f4f4',\n           padding: '10px',\n           borderBottom: '1px #ccc dotted',\n           textDecoration: this.props.todo.completed ? 'line-through' : 'none'\n       }\n    }\n\n    render() {\n\n        const{id, title} = this.props.todo; \n\n        return (\n            <div style={this.getStyle()}>\n                <p>\n                <input type=\"checkbox\" onChange={this.props.markComplete.bind(this, this.props.todo.id)}/> {' '}\n                {title}\n                <button onClick={this.props.delTodo.bind(this, id)} style={btnStyle}>x</button>\n                </p>\n            </div>\n        )\n    }\n}\n\n//PropTypes\nTodoItem.propTypes={\n    todo: PropTypes.object.isRequired,\n    markComplete: PropTypes.func.isRequired,\n    delTodo: PropTypes.func.isRequired,\n}\n\nconst btnStyle = {\n    background: '#ff0000',\n    color: '#fff', \n    border: 'none', \n    padding: '5px 9px',\n    borderRadius: '50%',\n    cursor: 'pointer', \n    float: 'right'\n\n}\nexport default TodoItem\n","import React, {Component} from 'react'; \nimport TodoItem from './TodoItem'; \nimport PropTypes from 'prop-types'; \n\nclass Todos extends Component{\n    render() {\n        return this.props.todos.map((todo) => (\n            <TodoItem key={todo.id} todo={todo} markComplete={this.props.markComplete} delTodo={this.props.delTodo} />\n        ));\n    }\n}\n\nTodos.propTypes={\n    todos: PropTypes.array.isRequired,\n    markComplete: PropTypes.func.isRequired,\n    delTodo: PropTypes.func.isRequired,\n}\n\nexport default Todos;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nexport class AddTodo extends Component {\n    state ={\n        title: ''\n    }\n\n    onSubmit= (e) => {\n        e.preventDefault(); \n        this.props.addTodo(this.state.title);\n        this.setState({title: ''}); \n    }\n\n    onChange = (e) => this.setState({[e.target.name]: e.target.value}); \n\n  render() {\n    return (\n      <form onSubmit={this.onSubmit} style={{display: 'flex'}}>\n          <input type=\"text\" name=\"title\" \n          style={{flex:'10', padding: '5px'}} \n          placeholder=\"Add Todo...\" \n          value={this.state.title}\n          onChange={this.onChange} />\n          <input type=\"submit\" value=\"Submit\" \n          className=\"btn\" style={{flex: '1'}} />\n\n      </form>\n    \n    );\n  }\n}\n\n//PropTypes\nAddTodo.propTypes={\n  addTodo: PropTypes.func.isRequired\n}\n\nexport default AddTodo;\n","import React from 'react'\n\nfunction About() {\n  return (\n   <React.Fragment>\n       <h1>About</h1>\n       <p>This a TodoList app built in react. It is part of a React crash course by Traversy Media. </p>\n   </React.Fragment>\n  )\n}\n\nexport default About; ","import React, {Component} from 'react';\nimport { BrowserRouter as Router, Route} from 'react-router-dom';\nimport Header from './components/layout/Header'\nimport Todos from './components/Todos';\nimport AddTodo from './components/AddTodo';\nimport About from './components/pages/About';\n// import uuid from 'uuid';\nimport axios from 'axios';\n\nimport './App.css';\n\n\n\nclass App extends Component{\n  state={\n    todos: [\n      // {\n      //   id: uuid.v4(), \n      //   title: 'Take out the trash', \n      //   completed: false\n      // },\n      // {\n      //   id: uuid.v4(), \n      //   title: 'Dinner with husband', \n      //   completed: false\n      // },\n      // {\n      //   id: uuid.v4(), \n      //   title: 'Meeting with boss', \n      //   completed: false\n      // }\n\n    ]\n  }\n\n  componentDidMount(){\n    axios.get('https://jsonplaceholder.typicode.com/todos?_limit=5').then(res => this.setState({todos: res.data}))\n  }\n\n  //Toggle Complete \n  markComplete = (id) =>{\n    this.setState({todos:this.state.todos.map(todo => {\n      if(todo.id === id){\n        todo.completed = !todo.completed \n      }\n      return todo; \n    })});\n  }\n\n  //Delete todo\n  delTodo=(id) =>{\n   \n      axios.delete(`https://jsonplaceholder.typicode.com/todos/${id}`)\n      .then(res =>   this.setState({todos: [...this.state.todos.filter\n        (todo => todo.id !== id)] }));\n\n\n    };\n\n  //Add Todo\n  addTodo = (title) => {\n\n    axios.post('https://jsonplaceholder.typicode.com/todos', {\n    title, \n    completed:false \n  })\n    .then(res => this.setState({todos: [...this.state.todos, res.data] }))\n    \n  }\n\nrender() {\n  return (\n    <Router>\n    <div className=\"App\">\n      <div className = \"container\">\n      <Header />\n      <Route exact path =\"/\" render={props => (\n        <React.Fragment>\n           <AddTodo addTodo = {this.addTodo} />\n          <Todos todos={this.state.todos} markComplete={this.markComplete}\n          delTodo={this.delTodo}/>\n        </React.Fragment>\n\n      )}/>\n      <Route path=\"/about\" component={About} />\n      </div>\n    </div>\n    </Router>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}