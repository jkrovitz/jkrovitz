{\rtf1\ansi\ansicpg1252\cocoartf1561
{\fonttbl\f0\fnil\fcharset0 Menlo-Bold;}
{\colortbl;\red255\green255\blue255;\red15\green112\blue3;}
{\*\expandedcolortbl;;\csgenericrgb\c5882\c43922\c1176;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\b\fs24 \cf2 """ ===============================================================================================================\
                                                Time Complexity\
===================================================================================================================\
Running time of find_max_whole_sum_array:\
We can take the for loop of lines 37 - 40 and find that it makes mid - low - 1 + 1 -> mid - low iterations and the\
for loop of lines 43 - 46 makes high - mid + 1 iterations, and so the total number of iterations is\
(mid - low) + (high - mid + 1) -> high - low + 1 = n.\
\
Running time of find_max_sum_sub_array_recurse:\
We denote by T(n) the running time of find_max_sum_sub_array_recurse on a sub-array of n elements. The base case\
when n =1 takes constant time so T(1) = \uc0\u1012 (1). Each of the sub-problems is solved on a sub-array of n/2 elements,\
and so we spend T(n/2) time solving each of them. Because we have to solve two sub-problems for the left sub-array\
and for the right sub-array, the contribution to the running time comes to 2T(n/2). The call to find_max_sum_whole_array\
takes \uc0\u1012 (n) time, like I demonstrated above.\
\
Running time of the overall program:\
T(n) = \uc0\u1012 (1) + 2T(n/2) + \u1012 (n)  + \u1012 (1) -> T(n) =  \u1012 (1) + 2T(n/2) + \u1012 (n)  + \u1012 (1) -> T(n) = 2T(n/2) + \u1012 (n)\
-> T(n) = \uc0\u1012  (n log n).\
================================================================================================================"""\
\
}